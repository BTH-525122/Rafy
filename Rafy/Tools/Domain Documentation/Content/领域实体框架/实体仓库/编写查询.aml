<?xml version="1.0" encoding="utf-8"?>
<topic id="59c80aec-c910-4880-b165-c3495ed5eb3e" revisionNumber="1">
    <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <summary>
            <para>在仓库中编写查询</para>
        </summary>
        <introduction>
            <autoOutline />
        </introduction>

        <section address="query">
            <title>查询模式</title>
            <content>
                <para>框架要求以一种统一的开发模式来编写实体仓库的查询方法，来兼顾本地应用、分布式应用程序的开发。不论在客户端，还是在服务端，都可以直接调用这种查询接口。这种开发模式如下：</para>
                <code language="cs">
                    <![CDATA[[RepositoryQuery]
public virtual WarehouseList GetByCode(string warehouseCode)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Code == warehouseCode);
    return (WarehouseList)this.QueryData(q);
}]]>
                </code>
                <list class="bullet">
                    <listItem>
                        <para>必须标记为虚方法。</para>
                        <para>这是因为框架需要对仓库生成代码，并对该方法进行拦截。</para>
                    </listItem>
                    <listItem>
                        <para>方法需要标记：[RepositoryQuery]。</para>
                        <para>不是所有的虚方法都会被拦截，所以需要显式标记来区分公有数据方法。</para>
                        <para>添加此标记后的方法拥有以下的功能：</para>
                        <para>
                            1.判断是需要在本地、还是服务端来执行此方法。如果需要在服务端执行，则框架会转而调用 WCF 数据门户。（如果需要分布式调用，所有参数需要支持可序列化。）
                        </para>
                        <para>
                            2.根据方法的返回值，来确定底层查询时应该返回的类型（EntityList、Entity、int、LiteDataTable）。
                        </para>
                        <para>
                            3.查询完成后，调整查询结果的类型，与需要的类型一致。
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            返回值
                        </para>
                        <para>
                            方法的返回值只可以是以下几类，具体实体列表类型、具体的实体类型、<codeInline>int</codeInline>（查询数据条数）、<codeInline>LiteDataTable</codeInline>（轻量级数据表格类型）。
                        </para>
                    </listItem>
                    <listItem>
                        <para>方法体</para>
                        <para>
                            方法体中需要构造查询，并最终使用<codeInline>QueryData()</codeInline>来查询数据。<codeInline>QueryData()</codeInline>方法会根据当前查询方法的返回值，而决定底层需要执行的查询的类型（查全部实体、查单个实体、查数据条数），并返回相应类型的数据。
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="demo">
            <title>四种查询示例</title>
            <content>
                <para>四种查询对应枚举 <codeInline>Rafy.Domain.RepositoryQueryType</codeInline>：</para>
                <code language="cs">
<![CDATA[/// <summary>
/// 仓库返回数据的类型
/// </summary>
public enum RepositoryQueryType
{
    /// <summary>
    /// 查询实体列表
    /// </summary>
    List = 0,
    /// <summary>
    /// 查询单个实体
    /// </summary>
    First = 1,
    /// <summary>
    /// 查询数据条数统计
    /// </summary>
    Count = 2,
    /// <summary>
    /// 查询数据表格
    /// </summary>
    Table = 3
}]]>
                </code>
                <list class="bullet">
                    <listItem>
                        <para>查询实体列表</para>
                        <para>返回具体实体列表类型。</para>
                        <code language="cs">
                            <![CDATA[[RepositoryQuery]
public virtual WarehouseList GetByCode(string warehouseCode)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Code == warehouseCode);
    return (WarehouseList)this.QueryData(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询单个实体</para>
                        <para>返回具体实体类型。</para>
                        <para>查询实体个数的数据层实现中，与查询实体列表的实体层实现保持一致。如果查询出多条实体，则框架只会返回第一个实体。</para>
                        <code language="cs">
                            <![CDATA[[RepositoryQuery]
public virtual Warehouse GetByName(string name)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.Name == name).OrderByDescending(e => e.CreateTime);
    return (Warehouse)this.QueryData(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询实体个数</para>
                        <para>返回整型。</para>
                        <para>查询实体个数的数据层实现中，与查询实体列表的实体层实现保持一致。框架内部会自动转换为数据行数的查询。</para>
                        <code language="cs">
                            <![CDATA[[RepositoryQuery]
public virtual long CountByDate(DateTime date)
{
    var q = this.CreateLinqQuery();
    q = q.Where(e => e.CreateTime >= date);
    return (long)this.QueryData(q);
}]]>
                        </code>
                    </listItem>
                    <listItem>
                        <para>查询表格数据</para>
                        <para>可返回一个简单的表格类型数据。LiteDataTable 类型是一个可直接用于网络传输的数据表格。</para>
                        <para>根据 Command Query Responsibility Segregation（命令查询职责分离，简称 CQRS）模式，复杂查询一般使用表格查询，但是返回的数据只做只读查看，不支持修改。</para>
                        <code language="cs">
                            <![CDATA[[RepositoryQuery]
public virtual LiteDataTable GetTableByName(string name)
{
    FormattedSql sql = "SELECT * FROM WAREHOUSE WHERE NAME = {0}";
    sql.Parameters.Add(name);
    return (this.DataQueryer as RdbDataQueryer).QueryTable(sql);
}]]>
                        </code>
                        <alert class="note">
                            <para>字符串可自动隐式转换为一个 FormattedSql 类型的对象。</para>
                            <para>FormattedSql 表格格式化的 Sql 语句，为了支持多个数据库，它其中的每一个参数都使用大括号括住的数字来代替，最终会通过 ADO.NET 来使用参数化的查询，而非使用 String.Format 简单地格式化 Sql 语句。</para>
                        </alert>
                    </listItem>
                </list>
            </content>
        </section>

        <section address="queryTypes">
            <title>实体查询实现方式</title>
            <content>
                <para>在数据层实现中，对于实体查询而言，目前支持以下三种查询方式：</para>
                <list class="bullet">
                    <listItem>
                        <para>
                            <link xlink:href="c7c6d07b-bb41-4590-a2a6-8b0b49ce1c0b" />
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <link xlink:href="02f40bcc-1ff3-4abc-b4a9-2dea57d516ce" />
                        </para>
                    </listItem>
                    <listItem>
                        <para>
                            <link xlink:href="c2eced2c-e434-4d53-a06d-fbc518fbddf5" />
                        </para>
                    </listItem>
                </list>
            </content>
        </section>

        <relatedTopics>
        </relatedTopics>
    </developerConceptualDocument>
</topic>
